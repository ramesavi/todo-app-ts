{"version":3,"sources":["components/AdditionExcercise/Inputs.tsx","components/AdditionExcercise/Functions.ts","components/AdditionExcercise/Table.tsx","components/AdditionExcercise/AddisonExercises.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Inputs","handleSubmit","useState","numExpressions","setNumExpression","minValue","setMinValue","maxValue","setMaxValue","numCols","setNumCols","className","onSubmit","e","type","min","value","onChange","parseInt","target","grouped","xs","n","reduce","acc","last","length","push","randomNumbers","max","Array","fill","map","x","Math","floor","random","nextInt","Table","data","rows","cols","c","styled","div","AddisonExercises","setData","table","expressions","i","maxLength","style","paddingRight","preventDefault","console","log","queryClient","QueryClient","App","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20db25e0.chunk.js","sourcesContent":["import * as React from 'react';\nimport {FormEvent, useState} from \"react\";\nimport {Data} from \"./AddisonExercises\";\nimport './Form.css'\n\ntype Props = {\n    handleSubmit: (e: FormEvent, data: Data) => void\n};\nexport const Inputs = ({handleSubmit}: Props) => {\n    const [numExpressions, setNumExpression] = useState(1)\n    const [minValue, setMinValue] = useState(1)\n    const [maxValue, setMaxValue] = useState(10)\n    const [numCols, setNumCols] = useState(3)\n\n    return (\n        <div className={\"form\"}>\n            <form onSubmit={e => handleSubmit(e, {\n                numExpressions: numExpressions,\n                minValue: minValue,\n                maxValue: maxValue,\n                numCols: numCols\n            })}>\n                <label>\n                    Number of Expressions\n                    <input type=\"number\" min={1} value={numExpressions}\n                           onChange={e => setNumExpression(parseInt(e.target.value))}/>\n                </label>\n                <label>\n                    Min Value\n                    <input type=\"number\" min={0} value={minValue}\n                           onChange={e => setMinValue(parseInt(e.target.value))}/>\n                </label>\n                <label>\n                    Max Value\n                    <input type=\"number\" min={1} value={maxValue}\n                           onChange={e => setMaxValue(parseInt(e.target.value))}/>\n                </label>\n                <label>\n                    Num Cols\n                    <input type=\"number\" min={1} value={numCols}\n                           onChange={e => setNumCols(parseInt(e.target.value))}/>\n                </label>\n                <input type=\"submit\" value=\"Generate\"/>\n            </form>\n        </div>\n    );\n};","export const nextInt = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1)) + min\n\nexport const grouped = <T>(xs: T[], n: number): T[][] =>\n    xs.reduce<T[][]>((acc, e) => {\n            const last = acc[acc.length - 1]\n            if (!last || last.length === n) acc.push([e])\n            else last.push(e)\n            return acc\n        }\n        , [])\n\n\nexport const randomNumbers = (n: number, min: number, max: number): number[] => new Array(n).fill(0).map(x => nextInt(min, max))","import React from 'react';\nimport {grouped} from \"./Functions\";\nimport styled from \"styled-components\";\n\ntype Props = {\n    numCols: number\n    data: JSX.Element[]\n}\n\n\nconst Table = ({\n                   numCols, data\n               }\n                   : Props) => {\n        const rows = grouped(data, numCols).map(cols =>\n            <tr>\n                {cols.map(c => <td>{c}</td>)}\n            </tr>\n        )\n\n        const Table = styled.div`\n          margin: 2rem;\n\n          table {\n            margin: auto;\n            border-collapse: collapse;\n          }\n\n          td, tr {\n            border: 1px solid black;\n            padding: 1rem;\n          }\n        `\n\n        return (\n            <Table>\n                <table>\n                    {rows}\n                </table>\n            </Table>\n        );\n    }\n;\n\nexport default Table;","import React, {FormEvent, useState} from 'react';\nimport {Inputs} from \"./Inputs\";\nimport {grouped, randomNumbers} from \"./Functions\";\nimport Table from \"./Table\";\nimport './AddisonExercises.css'\nimport styled from \"styled-components\";\n\nexport type Data = {\n    numExpressions: number,\n    minValue: number,\n    maxValue: number,\n    numCols: number,\n}\n\nconst AddisonExercises = () => {\n    const [data, setData] = useState<Data | null>(null)\n    const handleSubmit = (e: FormEvent, data: Data) => {\n        e.preventDefault()\n        setData(data)\n        console.log(data)\n    }\n\n    let table: any = null\n\n    if (data) {\n        const expressions =\n            grouped(randomNumbers(data.numExpressions * 2, data.minValue, data.maxValue), 2)\n                .map((n, i) => `${n[0]} + ${n[1]} =`)\n\n        const maxLength = Math.max(...expressions.map(x => x.length))\n\n        table =\n            <Table numCols={data.numCols}\n                   data={expressions.map(data => <div style={{paddingRight: `${maxLength / 2}rem`}}>{data}</div>)}/>\n    }\n\n    return (\n        <div>\n            <Inputs handleSubmit={handleSubmit}/>\n            {\n                table\n            }\n        </div>\n    );\n};\n\nexport default AddisonExercises;","import React from 'react';\nimport './App.css'\nimport {QueryClient, QueryClientProvider} from \"react-query\";\nimport TodoApp from \"./components/todos/TodoApp\";\nimport AddisonExercises from \"./components/AdditionExcercise/AddisonExercises\";\n\n\nconst queryClient = new QueryClient()\n\nfunction App() {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <div className=\"App\">\n                <AddisonExercises/>\n                {/*<TodoApp/>*/}\n            </div>\n        </QueryClientProvider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}